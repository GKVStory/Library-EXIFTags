diff --git a/libexif/exif-data.c b/libexif/exif-data.c
index de6facc..147c5a8 100644
--- a/libexif/exif-data.c
+++ b/libexif/exif-data.c
@@ -49,6 +49,19 @@
 
 static const unsigned char ExifHeader[] = {0x45, 0x78, 0x69, 0x66, 0x00, 0x00};
 
+/*! Magic number for TIFF files */
+static const unsigned char TIFFHeaderMotorola[] = {'M', 'M', 0, 42};
+static const unsigned char TIFFHeaderIntel[]	= {'I', 'I', 42, 0};
+
+typedef enum {
+	E_DATA_FORMAT_UNKNOWN = 0,
+	E_DATA_FORMAT_EXIF,
+	E_DATA_FORMAT_JPEG,
+	E_DATA_FORMAT_FUJI_RAW,
+	E_DATA_FORMAT_TIFF
+} ExifDataFormat;
+
+
 struct _ExifDataPrivate
 {
 	ExifByteOrder order;
@@ -132,14 +145,14 @@ exif_data_new_mem (ExifMem *mem)
 	}
 
 	/* Default options */
-#ifndef NO_VERBOSE_TAG_STRINGS
+//#ifndef NO_VERBOSE_TAG_STRINGS
 	/*
 	 * When the tag list is compiled away, setting this option prevents
 	 * any tags from being loaded
 	 */
-	exif_data_set_option (data, EXIF_DATA_OPTION_IGNORE_UNKNOWN_TAGS);
-#endif
-	exif_data_set_option (data, EXIF_DATA_OPTION_FOLLOW_SPECIFICATION);
+//	exif_data_set_option (data, EXIF_DATA_OPTION_IGNORE_UNKNOWN_TAGS);
+//#endif
+//	exif_data_set_option (data, EXIF_DATA_OPTION_FOLLOW_SPECIFICATION);
 
 	/* Default data type: none */
 	exif_data_set_data_type (data, EXIF_DATA_TYPE_COUNT);
@@ -374,7 +387,150 @@ level_cost(unsigned int n)
 	return (unsigned int)(ceil(log(n + 0.1)/log_1_1));
 }
 
-/*! Load data for an IFD.
+/*! Load data for an IFD - TIFF files.
+ *
+ * \param[in,out] data #ExifData
+ * \param[in] ifd IFD to load
+ * \param[in] d pointer to buffer containing raw IFD data
+ * \param[in] ds size of raw data in buffer at \c d
+ * \param[in] offset offset into buffer at \c d at which IFD starts
+ * \param[in] recursion_depth number of times this function has been
+ * recursively called without returning
+ */
+static void
+exif_data_load_data_content_tiff (ExifData *data, ExifIfd ifd,
+			     const unsigned char *d,
+			     unsigned int ds, unsigned int offset, unsigned int recursion_depth)
+{
+
+	ExifLong o, thumbnail_offset = 0, thumbnail_length = 0;
+	ExifShort n;
+	ExifEntry *entry;
+	unsigned int i;
+	ExifTag tag;
+
+	if (!data || !data->priv)
+		return;
+
+	/* check for valid ExifIfd enum range */
+	if ((((int)ifd) < 0) || ( ((int)ifd) >= EXIF_IFD_COUNT))
+	  return;
+
+	if (recursion_depth > 30) {
+		exif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA, "ExifData",
+			  "Deep recursion detected!");
+		return;
+	}
+
+	/* Read the number of entries */
+	if ((offset + 2 < offset) || (offset + 2 < 2) || (offset + 2 > ds)) {
+		exif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA, "ExifData",
+			  "Tag data past end of buffer (%u > %u)", offset+2, ds);
+		return;
+	}
+
+	n = exif_get_short (d + offset, data->priv->order);
+	exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
+	          "Loading %hu entries...", n);
+	offset += 2;
+
+	/* Check if we have enough data. */
+	if (offset + 12 * n > ds) {
+		n = (ds - offset) / 12;
+		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
+				  "Short data; only loading %hu entries...", n);
+	}
+
+	for (i = 0; i < n; i++) {
+		tag = exif_get_short (d + offset + 12 * i, data->priv->order);
+
+		switch (tag) {
+		case EXIF_TAG_EXIF_IFD_POINTER:
+		case EXIF_TAG_GPS_INFO_IFD_POINTER:
+		case EXIF_TAG_INTEROPERABILITY_IFD_POINTER:
+
+			o = exif_get_long (d + offset + 12 * i + 8,
+					   data->priv->order);
+			/* FIXME: IFD_POINTER tags aren't marked as being in a
+			 * specific IFD, so exif_tag_get_name_in_ifd won't work
+			 */
+			exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
+				  "Sub-IFD entry 0x%x ('%s') at %u.", tag,
+				  exif_tag_get_name(tag), o);
+
+			switch (tag) {
+			case EXIF_TAG_EXIF_IFD_POINTER:
+				CHECK_REC (EXIF_IFD_EXIF);
+				exif_data_load_data_content_tiff (data, EXIF_IFD_EXIF, d, ds, o, recursion_depth + 1);
+				break;
+			case EXIF_TAG_GPS_INFO_IFD_POINTER:
+				CHECK_REC (EXIF_IFD_GPS);
+				exif_data_load_data_content_tiff (data, EXIF_IFD_GPS, d, ds, o, recursion_depth + 1);
+				break;
+			case EXIF_TAG_INTEROPERABILITY_IFD_POINTER:
+				CHECK_REC (EXIF_IFD_INTEROPERABILITY);
+				exif_data_load_data_content_tiff (data, EXIF_IFD_INTEROPERABILITY, d, ds, o, recursion_depth + 1);
+				break;
+			case EXIF_TAG_JPEG_INTERCHANGE_FORMAT:
+				thumbnail_offset = o;
+				if (thumbnail_offset && thumbnail_length)
+					exif_data_load_data_thumbnail (data, d,
+								       ds, thumbnail_offset,
+								       thumbnail_length);
+				break;
+			case EXIF_TAG_JPEG_INTERCHANGE_FORMAT_LENGTH:
+				thumbnail_length = o;
+				if (thumbnail_offset && thumbnail_length)
+					exif_data_load_data_thumbnail (data, d,
+								       ds, thumbnail_offset,
+								       thumbnail_length);
+				break;
+			default:
+				return;
+			}
+			break;
+		default:
+
+			/*
+			 * If we don't know the tag, don't fail. It could be that new
+			 * versions of the standard have defined additional tags. Note that
+			 * 0 is a valid tag in the GPS IFD.
+			 */
+			if (!exif_tag_get_name_in_ifd (tag, ifd)) {
+
+				/*
+				 * Special case: Tag and format 0. That's against specification
+				 * (at least up to 2.2). But Photoshop writes it anyways.
+				 */
+				if (!memcmp (d + offset + 12 * i, "\0\0\0\0", 4)) {
+					exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
+						  "Skipping empty entry at position %u in '%s'.", i,
+						  exif_ifd_get_name (ifd));
+					break;
+				}
+				exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
+					  "Unknown tag 0x%04x (entry %u in '%s'). Please report this tag "
+					  "to <libexif-devel@lists.sourceforge.net>.", tag, i,
+					  exif_ifd_get_name (ifd));
+
+				if (data->priv->options & EXIF_DATA_OPTION_IGNORE_UNKNOWN_TAGS)
+				{
+					break;
+				}
+			}
+			entry = exif_entry_new_mem (data->priv->mem);
+			if (exif_data_load_data_entry (data, entry, d, ds,
+						   offset + 12 * i))
+			{
+				exif_content_add_entry (data->ifd[ifd], entry);
+			}
+			exif_entry_unref (entry);
+			break;
+		}
+	}
+}
+
+/*! Load data for an IFD - no TIFF files.
  *
  * \param[in,out] data #ExifData
  * \param[in] ifd IFD to load
@@ -385,7 +541,7 @@ level_cost(unsigned int n)
  * call could be
  */
 static void
-exif_data_load_data_content (ExifData *data, ExifIfd ifd,
+exif_data_load_data_content_jpeg (ExifData *data, ExifIfd ifd,
 			     const unsigned char *d,
 			     unsigned int ds, unsigned int offset, unsigned int recursion_cost)
 {
@@ -462,17 +618,17 @@ exif_data_load_data_content (ExifData *data, ExifIfd ifd,
 			switch (tag) {
 			case EXIF_TAG_EXIF_IFD_POINTER:
 				CHECK_REC (EXIF_IFD_EXIF);
-				exif_data_load_data_content (data, EXIF_IFD_EXIF, d, ds, o,
+				exif_data_load_data_content_jpeg (data, EXIF_IFD_EXIF, d, ds, o,
 					recursion_cost + level_cost(n));
 				break;
 			case EXIF_TAG_GPS_INFO_IFD_POINTER:
 				CHECK_REC (EXIF_IFD_GPS);
-				exif_data_load_data_content (data, EXIF_IFD_GPS, d, ds, o,
+				exif_data_load_data_content_jpeg (data, EXIF_IFD_GPS, d, ds, o,
 					recursion_cost + level_cost(n));
 				break;
 			case EXIF_TAG_INTEROPERABILITY_IFD_POINTER:
 				CHECK_REC (EXIF_IFD_INTEROPERABILITY);
-				exif_data_load_data_content (data, EXIF_IFD_INTEROPERABILITY, d, ds, o,
+				exif_data_load_data_content_jpeg (data, EXIF_IFD_INTEROPERABILITY, d, ds, o,
 					recursion_cost + level_cost(n));
 				break;
 			case EXIF_TAG_JPEG_INTERCHANGE_FORMAT:
@@ -534,6 +690,31 @@ exif_data_load_data_content (ExifData *data, ExifIfd ifd,
 	}
 }
 
+/*! Load data for an IFD.
+ *
+ * \param[in,out] data #ExifData
+ * \param[in] ifd IFD to load
+ * \param[in] d pointer to buffer containing raw IFD data
+ * \param[in] ds size of raw data in buffer at \c d
+ * \param[in] offset offset into buffer at \c d at which IFD starts
+ * \param[in] recursion_depth number of times this function has been
+ * recursively called without returning
+ */
+static void
+exif_data_load_data_content (ExifData *data, ExifIfd ifd,
+			     const unsigned char *d,
+			     unsigned int ds, unsigned int offset, unsigned int recursion_depth)
+{
+	if(data->exifDataFormat==E_DATA_FORMAT_TIFF) {
+		exif_data_load_data_content_tiff (data, ifd, d, ds, offset, recursion_depth);
+	}
+	else {
+		exif_data_load_data_content_jpeg (data, ifd, d, ds, offset, recursion_depth);
+	}
+
+
+}
+
 static int
 cmp_func (const unsigned char *p1, const unsigned char *p2, ExifByteOrder o)
 {
@@ -842,6 +1023,7 @@ exif_data_load_data (ExifData *data, const unsigned char *d_orig,
 	ExifShort n;
 	const unsigned char *d = d_orig;
 	unsigned int len, fullds;
+	int offsetFileFormat=0;
 
 	if (!data || !data->priv || !d || !ds)
 		return;
@@ -860,7 +1042,12 @@ exif_data_load_data (ExifData *data, const unsigned char *d_orig,
 	if (!memcmp (d, ExifHeader, 6)) {
 		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
 			  "Found EXIF header at start.");
-	} else {
+	} else if( !memcmp(d, TIFFHeaderIntel, sizeof(TIFFHeaderIntel) )
+			||!memcmp(d,TIFFHeaderMotorola, sizeof(TIFFHeaderMotorola))) {
+		data->exifDataFormat = E_DATA_FORMAT_TIFF;
+		offsetFileFormat = -6;
+	}
+	else {
 		while (ds >= 3) {
 			while (ds && (d[0] == 0xff)) {
 				d++;
@@ -921,14 +1108,18 @@ exif_data_load_data (ExifData *data, const unsigned char *d_orig,
 		LOG_TOO_SMALL;
 		return;
 	}
-	if (memcmp (d, ExifHeader, 6)) {
-		exif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA,
-			  "ExifData", _("EXIF header not found."));
-		return;
-	}
+	if(offsetFileFormat==0)
+	{
+		if (memcmp (d, ExifHeader, 6)) {
+			exif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA,
+				  "ExifData", _("EXIF header not found."));
+			return;
+		}
 
-	exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
-		  "Found EXIF header.");
+
+		exif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, "ExifData",
+			  "Found EXIF header.");
+	}
 
 	/* Sanity check the data length */
 	if (ds < 14)
@@ -938,19 +1129,25 @@ exif_data_load_data (ExifData *data, const unsigned char *d_orig,
 	   16-bit length), so cap the data length to protect against overflow
 	   in future offset calculations */
 	fullds = ds;
-	if (ds > 0xfffe)
-		ds = 0xfffe;
+	if (data->exifDataFormat != E_DATA_FORMAT_TIFF) { //TIFF can be at end of file.
+		if (ds > 0xfffe)
+			ds = 0xfffe;
+	}
 
 	/* Byte order (offset 6, length 2) */
-	if (!memcmp (d + 6, "II", 2))
+	if (!memcmp (d +offsetFileFormat +  6, "II", 2)) {
 		data->priv->order = EXIF_BYTE_ORDER_INTEL;
-	else if (!memcmp (d + 6, "MM", 2))
+	}
+	else if (!memcmp (d + offsetFileFormat + 6, "MM", 2)) {
 		data->priv->order = EXIF_BYTE_ORDER_MOTOROLA;
+	}
 	else {
 		exif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA,
 			  "ExifData", _("Unknown encoding."));
 		return;
 	}
+	d = d + offsetFileFormat;
+
 
 	/* Fixed value */
 	if (exif_get_short (d + 8, data->priv->order) != 0x002a)
@@ -1162,8 +1359,12 @@ exif_data_foreach_content (ExifData *data, ExifDataForeachContentFunc func,
 	if (!data || !func)
 		return;
 
-	for (i = 0; i < EXIF_IFD_COUNT; i++)
+	for (i = 0; i < EXIF_IFD_COUNT; i++) {
+		if(data->exifDataFormat == E_DATA_FORMAT_TIFF && i==EXIF_IFD_1)
+			continue;
+
 		func (data->ifd[i], user_data);
+	}
 }
 
 typedef struct _ByteOrderChangeData ByteOrderChangeData;
diff --git a/libexif/exif-data.h b/libexif/exif-data.h
index 7d87d1d..1c1f291 100644
--- a/libexif/exif-data.h
+++ b/libexif/exif-data.h
@@ -55,6 +55,9 @@ struct _ExifData
 	unsigned int size;
 
 	ExifDataPrivate *priv;
+	/*! Format of file read to ExifData */
+	unsigned int exifDataFormat;
+
 };
 
 /*! Allocate a new #ExifData. The #ExifData contains an empty
diff --git a/libexif/exif-entry.c b/libexif/exif-entry.c
index ab52d3d..0aafbf3 100644
--- a/libexif/exif-entry.c
+++ b/libexif/exif-entry.c
@@ -69,7 +69,7 @@ exif_entry_log (ExifEntry *e, ExifLogCode code, const char *format, ...)
 #endif
 #endif
 
-static void *
+void *
 exif_entry_alloc (ExifEntry *e, unsigned int i)
 {
 	void *d;
@@ -166,7 +166,7 @@ exif_entry_free (ExifEntry *e)
 	}
 }
 
-static void
+void
 clear_entry (ExifEntry *e)
 {
 	e->components = 0;
diff --git a/libexif/exif-entry.h b/libexif/exif-entry.h
index def5347..b934c5d 100644
--- a/libexif/exif-entry.h
+++ b/libexif/exif-entry.h
@@ -172,6 +172,14 @@ const char *exif_entry_get_value (ExifEntry *entry, char *val,
  */
 void        exif_entry_dump      (ExifEntry *entry, unsigned int indent);
 
+/**
+ * Added to support tiff in external library
+ */
+void
+clear_entry (ExifEntry *e);
+void *
+exif_entry_alloc (ExifEntry *e, unsigned int i);
+
 /*! Return the IFD number of the given #ExifEntry
  *
  * \param[in] e an #ExifEntry*
diff --git a/libexif/exif-loader.c b/libexif/exif-loader.c
index 8d855e0..f79370f 100644
--- a/libexif/exif-loader.c
+++ b/libexif/exif-loader.c
@@ -60,7 +60,8 @@ typedef enum {
 	EL_DATA_FORMAT_UNKNOWN,
 	EL_DATA_FORMAT_EXIF,
 	EL_DATA_FORMAT_JPEG,
-	EL_DATA_FORMAT_FUJI_RAW
+	EL_DATA_FORMAT_FUJI_RAW,
+	EL_DATA_FORMAT_TIFF
 } ExifLoaderDataFormat;
 
 /*! \internal */
@@ -87,6 +88,10 @@ struct _ExifLoader {
 /*! Magic number for EXIF header */
 static const unsigned char ExifHeader[] = {0x45, 0x78, 0x69, 0x66, 0x00, 0x00};
 
+/*! Magic number for TIFF files */
+static const unsigned char TIFFHeaderMotorola[] = {'M', 'M', 0, 42};
+static const unsigned char TIFFHeaderIntel[]	= {'I', 'I', 42, 0};
+
 static void *
 exif_loader_alloc (ExifLoader *l, unsigned int i)
 {
@@ -103,6 +108,94 @@ exif_loader_alloc (ExifLoader *l, unsigned int i)
 	return NULL;
 }
 
+void
+exif_loader_get_tiff_container_size (ExifLoader *loader, const char *fname)
+{
+
+	FILE *f;
+	int size;
+	unsigned char data[1024];
+	ExifByteOrder order;
+	ExifLong offsetAddress;
+	ExifShort tagCount;
+	unsigned char lastIFD;
+
+	if (!loader)
+		return;
+
+	f = fopen (fname, "rb");
+	if (!f) {
+		exif_log (loader->log, EXIF_LOG_CODE_NONE, "ExifLoader",
+			  _("The file '%s' could not be opened."), fname);
+		return;
+	}
+
+	size = (int)fread (data, 1, sizeof(data), f);
+	if (size < 6 ) {
+		exif_log (loader->log, EXIF_LOG_CODE_NONE, "ExifLoader",
+			  _("The header of '%s' could not be read."), fname);
+    goto closefile;
+	}
+
+
+	//Check TIFF header
+	if( !memcmp(data, TIFFHeaderIntel, sizeof(TIFFHeaderIntel) )) {
+		order = EXIF_BYTE_ORDER_INTEL;
+	}
+	else if (!memcmp(data,TIFFHeaderMotorola, sizeof(TIFFHeaderMotorola))) {
+		order = EXIF_BYTE_ORDER_MOTOROLA;
+	}
+	else {
+		goto closefile;
+	}
+
+	//If a TIFF header found, the size should be calculated using IFD offsets
+	lastIFD = 0;
+	offsetAddress=4;
+
+	while(!lastIFD)
+	{
+		if(fseek (f, offsetAddress, SEEK_SET)) {
+			exif_log (loader->log, EXIF_LOG_CODE_NONE, "ExifLoader",
+			  _("Can't read file at addres '%u'"), offsetAddress);
+			  goto closefile;
+		}
+		loader->size=offsetAddress + 1024;
+
+		if (fread(data, 1, sizeof(data), f) != sizeof(ExifLong)) {
+			exif_log(loader->log, EXIF_LOG_CODE_CORRUPT_DATA, "ExifLoader",
+			"Can't find offset address of offset of the tiff");
+			goto closefile;
+		}
+
+		offsetAddress= exif_get_long(data, order);
+
+		if(fseek (f, offsetAddress, SEEK_SET)) {
+			exif_log (loader->log, EXIF_LOG_CODE_NONE, "ExifLoader",
+			  _("Can't read file at addres '%u'"), offsetAddress);
+			 goto closefile;
+		}
+
+		if(offsetAddress==0) {
+			lastIFD=1;
+		}
+		else {
+			if (fread(data, 1, sizeof(data), f) != sizeof(ExifShort)) {
+				exif_log(loader->log, EXIF_LOG_CODE_CORRUPT_DATA, "ExifLoader",
+					"Can't read the tagcount of the tiff");
+				goto closefile;
+
+			}
+			tagCount = exif_get_short(data, order);
+			offsetAddress = tagCount*0xC + offsetAddress + 2;
+		}
+	}
+
+closefile:
+	fclose (f);
+}
+
+
 void
 exif_loader_write_file (ExifLoader *l, const char *path)
 {
@@ -119,6 +212,9 @@ exif_loader_write_file (ExifLoader *l, const char *path)
 			  _("The file '%s' could not be opened."), path);
 		return;
 	}
+
+	exif_loader_get_tiff_container_size (l, path);
+
 	while (1) {
 		size = (int)fread (data, 1, sizeof (data), f);
 		if (size <= 0) 
@@ -214,6 +310,12 @@ exif_loader_write (ExifLoader *eld, unsigned char *buf, unsigned int len)
 			eld->size = 84;
 			eld->state = EL_SKIP_BYTES;
 			eld->size = 84;
+		} else if ((memcmp(eld->b, "II*\000", 4) == 0)
+			|| (memcmp(eld->b, "MM\000*", 4) == 0)) {
+			eld->data_format = EL_DATA_FORMAT_TIFF;
+			eld->state = EL_EXIF_FOUND;
+			//There is not APP1 Data size, for TIFF,
+			//then the size was calculated following the IFD structure see exif_loader_get_tiff_container_size()
 
 		} else if (!memcmp (eld->b + 2, ExifHeader, sizeof (ExifHeader))) {
 
@@ -225,7 +327,7 @@ exif_loader_write (ExifLoader *eld, unsigned char *buf, unsigned int len)
 		break;
 	}
 
-	for (i = 0; i < sizeof (eld->b); i++)
+	for (i = 0; i < sizeof (eld->b); i++) {
 		switch (eld->state) {
 		case EL_EXIF_FOUND:
 			if (!exif_loader_copy (eld, eld->b + i,
@@ -304,6 +406,7 @@ exif_loader_write (ExifLoader *eld, unsigned char *buf, unsigned int len)
 				return 0;
 			}
 		}
+	}
 
 	/*
 	 * If we reach this point, the buffer has not been big enough
diff --git a/libexif/exif-loader.h b/libexif/exif-loader.h
index 62ee87c..9c9f42e 100644
--- a/libexif/exif-loader.h
+++ b/libexif/exif-loader.h
@@ -121,6 +121,14 @@ void exif_loader_get_buf (ExifLoader *loader, const unsigned char **buf,
  */
 void exif_loader_log (ExifLoader *loader, ExifLog *log);
 
+
+/*! Check file header, if tiff file found, calculates #ExifLoader size
+ * \param[in] loader the loader
+  * \param[in] fname path to the file to read
+ */
+void exif_loader_get_tiff_container_size (ExifLoader *loader, const char *fname);
+
+
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
diff --git a/libexif/exif-tag.c b/libexif/exif-tag.c
index 34f4e39..2ea059a 100644
--- a/libexif/exif-tag.c
+++ b/libexif/exif-tag.c
@@ -524,6 +524,15 @@ static const struct TagEntry {
 	{EXIF_TAG_TIME_ZONE_OFFSET, "TimeZoneOffset", N_("Time Zone Offset"),
 	 N_("Encodes time zone of camera clock relative to GMT."),
 	 ESL_UNKNOWN},
+	 {EXIF_TAG_SENSITIVITY_TYPE, "SensitivityType",
+	 N_("Sensitivity Type"),
+	 N_(""),
+	 { ESL_NNNN, ESL_NNNN, ESL_OOOO, ESL_NNNN, ESL_NNNN } },
+	 {EXIF_TAG_RECOMMENDED_EXPOSURE_INDEX, "RecommendedExposureIndex",
+	 N_("Recommended Exposure Index"),
+	 N_(""),
+	 { ESL_NNNN, ESL_NNNN, ESL_OOOO, ESL_NNNN, ESL_NNNN } },
+
 	{EXIF_TAG_EXIF_VERSION, "ExifVersion", N_("Exif Version"),
 	 N_("The version of this standard supported. Nonexistence of this "
 	    "field is taken to mean nonconformance to the standard."),
@@ -914,6 +923,11 @@ static const struct TagEntry {
 	{EXIF_TAG_PRINT_IMAGE_MATCHING, "PrintImageMatching", N_("PRINT Image Matching"),
 	 N_("Related to Epson's PRINT Image Matching technology"),
 	 ESL_UNKNOWN},
+	  //{ ESL_OOOO, ESL_OOOO, ESL_OOOO, ESL_OOOO, ESL_OOOO } },  //Se adiciona todo opcional
+	{EXIF_TAG_DNG_PRIVATE_DATA, "DNGPrivateData", N_("DNG Private Data"),
+	  N_("DNG Private Data"),
+	 { ESL_OOOO, ESL_OOOO, ESL_OOOO, ESL_OOOO, ESL_OOOO } },  //Se adiciona todo opcional
+
 	/* Not in EXIF 2.2 (from the Microsoft HD Photo specification) */
 	{EXIF_TAG_PADDING, "Padding", N_("Padding"),
 	 N_("This tag reserves space that can be reclaimed later when "
diff --git a/libexif/exif-tag.h b/libexif/exif-tag.h
index 3103903..a30606f 100644
--- a/libexif/exif-tag.h
+++ b/libexif/exif-tag.h
@@ -89,6 +89,9 @@ typedef enum {
 	EXIF_TAG_ISO_SPEED_RATINGS		= 0x8827,
 	EXIF_TAG_OECF				= 0x8828,
 	EXIF_TAG_TIME_ZONE_OFFSET		= 0x882a,
+	EXIF_TAG_SENSITIVITY_TYPE		= 0x8830,
+	EXIF_TAG_RECOMMENDED_EXPOSURE_INDEX	= 0x8832,
+	EXIF_TAG_ISO_SPEED			= 0x8833,
 	EXIF_TAG_EXIF_VERSION			= 0x9000,
 	EXIF_TAG_DATE_TIME_ORIGINAL		= 0x9003,
 	EXIF_TAG_DATE_TIME_DIGITIZED		= 0x9004,
@@ -157,6 +160,7 @@ typedef enum {
 	EXIF_TAG_SOURCE_EXPOSURE_TIMES_OF_COMPOSITE_IMAGE 		= 0xa462,
 	EXIF_TAG_GAMMA				= 0xa500,
 	EXIF_TAG_PRINT_IMAGE_MATCHING		= 0xc4a5,
+	EXIF_TAG_DNG_PRIVATE_DATA = 0xc634,
 	EXIF_TAG_PADDING			= 0xea1c
 } ExifTag;
 
